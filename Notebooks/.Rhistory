rm(list = ls(all.names = TRUE))
gc()
# Package names
packages <- c("dplyr", "tidyr", "reshape", "reshape2", "tidyverse", "MASS")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
calendar_sales <- read.csv("../Data/task_1.csv")[,-1]
sales_price <- read.csv("../Data/task_2.csv")[,-1]
calendar_sales_price <- merge(calendar_sales, sales_price, by = c('wm_yr_wk', 'week_id', 'store_id', 'item_id'), all.x = TRUE)
rm(calendar_sales)
rm(sales_price)
dim(calendar_sales_price)
View(calendar_sales_price)
dim(calendar_sales_price)
calendar_sales_price <- calendar_sales_price %>% mutate_at(vars('sell_price'), ~replace_na(.,0))
calendar_sales_price$weekly_revenue <-calendar_sales_price$weekly_sale * calendar_sales_price$sell_price
View(calendar_sales_price)
calendar_sales_price2 <- calendar_sales_price %>%
arrange(store_id, item_id) %>%
group_by(store_id, item_id) %>%
mutate(pct_change_price = ((sell_price - lag(sell_price))/lag(sell_price) * 100)) %>%
ungroup
calendar_sales_price2$pct_change_price <- ifelse(is.infinite(calendar_sales_price2$pct_change_price), 0, calendar_sales_price2$pct_change_price)
calendar_sales_price2$pct_change_price <- ifelse(is.na(calendar_sales_price2$pct_change_price), 0, calendar_sales_price2$pct_change_price)
min(task_3_product_level$pct_change_price)
calendar_sales_price2$pct_change_price <- ifelse(is.na(calendar_sales_price2$pct_change_price), 0, calendar_sales_price2$pct_change_price)
View(calendar_sales_price2)
dim(task_3_product_level)
dim(calendar_sales_price2)
task_3_product_level <- calendar_sales_price2 %>% arrange(wm_yr_wk, week_id, store_id, item_id)
View(task_3_product_level)
min(task_3_product_level$pct_change_price)
0.001 - 99.88864
0.001 + 99.88864
min <- min(task_3_product_level$pct_change_price)
min
min <- min(task_3_product_level$pct_change_price) - 0.001
min
task_3_product_level2 <- task_3_product_level %>%
mutate(log_pct_change = log(pct_change_price + min))
min(pct_change_price)
min(task_3_product_level2$pct_change_price)
min(task_3_product_level2$pct_change_price) + min
min <- abs(min(task_3_product_level$pct_change_price) - 0.001)
min
min(task_3_product_level2$pct_change_price) + min
task_3_product_level2 <- task_3_product_level %>%
mutate(log_pct_change = log(pct_change_price + min))
View(task_3_product_level2)
task_3_product_level2[task_3_product_level2$pct_change_price != 0]
task_3_product_level2[task_3_product_level2$pct_change_price != 0,]
write.csv(task_3_product_level2, file='../Data/task_3_product_level.csv', row.names=F)
task_3 <- task_3_product_level %>% group_by(wm_yr_wk, week_id, store_id) %>%
summarize(Cultural = max(Cultural),
Sporting = max(Sporting),
National = max(National),
Religious = max(Religious),
weekly_revenue = sum(weekly_revenue),
pct_change_price = mean(pct_change_price))
View(task_3)
min <- abs(min(task_3$pct_change_price) - 0.001)
min
min(task_3$pct_change_price)
task_3_2 <- task_3l %>%
mutate(log_pct_change = log(pct_change_price + min))
task_3_2 <- task_3 %>%
mutate(log_pct_change = log(pct_change_price + min))
View(task_3_2)
write.csv(task_3_2, file='../Data/task_3.csv', row.names=F)
rm(list = ls(all.names = TRUE))
gc()
rm(list = ls(all.names = TRUE))
gc()
# Package names
packages <- c("dplyr", "tidyr", "reshape", "reshape2", "tidyverse", "MASS")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
calendar_sales <- read.csv("../Data/task_1.csv")[,-1]
sales_price <- read.csv("../Data/task_2.csv")[,-1]
calendar_sales_price <- merge(calendar_sales, sales_price, by = c('wm_yr_wk', 'week_id', 'store_id', 'item_id'), all.x = TRUE)
rm(calendar_sales)
rm(sales_price)
View(calendar_sales_price)
dim(calendar_sales_price)
calendar_sales_price <- calendar_sales_price %>% mutate_at(vars('sell_price'), ~replace_na(.,0))
calendar_sales_price$weekly_revenue <-calendar_sales_price$weekly_sale * calendar_sales_price$sell_price
View(calendar_sales_price)
calendar_sales_price2 <- calendar_sales_price %>%
arrange(store_id, item_id) %>%
group_by(store_id, item_id) %>%
mutate(pct_change_price = ((sell_price - lag(sell_price))/lag(sell_price) * 100)) %>%
ungroup
calendar_sales_price2$pct_change_price <- ifelse(is.infinite(calendar_sales_price2$pct_change_price), 0, calendar_sales_price2$pct_change_price)
calendar_sales_price2$pct_change_price <- ifelse(is.na(calendar_sales_price2$pct_change_price), 0, calendar_sales_price2$pct_change_price)
dim(calendar_sales_price2)
task_3_product_level <- calendar_sales_price2 %>% arrange(wm_yr_wk, week_id, store_id, item_id)
min <- abs(min(task_3_product_level$pct_change_price) - 0.001)
task_3_product_level2 <- task_3_product_level %>%
mutate(log_pct_change = log(pct_change_price + min))
write.csv(task_3_product_level2, file='../Data/task_3_product_level.csv', row.names=F)
task_3 <- task_3_product_level %>% group_by(wm_yr_wk, week_id, store_id) %>%
summarize(Cultural = max(Cultural),
Sporting = max(Sporting),
National = max(National),
Religious = max(Religious),
weekly_revenue = sum(weekly_revenue),
pct_change_price = mean(pct_change_price))
dim(task_3)
min <- abs(min(task_3$pct_change_price) - 0.001)
task_3_2 <- task_3 %>%
mutate(log_pct_change = log(pct_change_price + min))
write.csv(task_3_2, file='../Data/task_3.csv', row.names=F)
rm(list = ls(all.names = TRUE))
gc()
library(ggplot2)
library(ggplot2)
walmart.sale <- read.csv("..//Data//task_4.csv")
setwd("~/GitHub/Team-1/Retail Store Sales Forecast and Accuracy Analysis/Notebooks")
par(mfrow = c(2, 2))
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
walmart.sale <- read.csv("..//Data//task_4.csv")
head(walmart.sale)
ggplot(walmart.sale, aes(x=amzn_price, y=weekly_revenue, color=store_id)) + geom_point() +
labs(title="Amazon stock price VS Walmart weekly revenue", x="Amazon stock price", y="Walmart weekly revenue")+
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=gas_price, y=weekly_revenue,color=store_id)) + geom_point() +
labs(title="Local Gas price VS Walmart weekly revenue", x="Local Gas Price", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=pct_change_price, y=weekly_revenue)) + geom_point() +
labs(title="Mean Store Item Price Change VS Walmart Weekly Revenue", x="Mean Store Item Price Change", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=log_pct_change, y=weekly_revenue)) + geom_point() +
labs(title="Mean Log Store Item Price Change VS Walmart Weekly Revenue", x="Mean Log Store Item Price Change", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=week_id, y=weekly_revenue,color=store_id)) + geom_point() +
labs(title="Walmart Weekly Revenue 2011-2016", x="Week 1 - Week 278", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=gas_price, y=weekly_revenue,color=store_id)) + geom_point() +
labs(title="Local Gas price VS Walmart weekly revenue", x="Local Gas Price", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=amzn_price, y=weekly_revenue, color=store_id)) + geom_point() +
labs(title="Amazon stock price VS Walmart weekly revenue", x="Amazon stock price", y="Walmart weekly revenue")+
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
walmart.sale <- read.csv("..//Data//task_4.csv")
walmart.sale <- transform(walmart.sale,log_amzn_price=log(amzn_price),log_weekly_revenue=log(weekly_revenue),log_gas_price=log(gas_price),change_price_event=max(Cultural,Sporting,National,Religious)*pct_change_price)
write.csv(walmart.sale,"..//Data//task_4_2.csv")
head(walmart.sale)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
walmart.sale <- read.csv("..//Data//task_4.csv")
head(walmart.sale)
ggplot(walmart.sale, aes(x=amzn_price, y=weekly_revenue, color=store_id)) + geom_point() +
labs(title="Amazon stock price VS Walmart weekly revenue", x="Amazon stock price", y="Walmart weekly revenue")+
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=gas_price, y=weekly_revenue,color=store_id)) + geom_point() +
labs(title="Local Gas price VS Walmart weekly revenue", x="Local Gas Price", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=pct_change_price, y=weekly_revenue)) + geom_point() +
labs(title="Mean Store Item Price Change VS Walmart Weekly Revenue", x="Mean Store Item Price Change", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=log_pct_change, y=weekly_revenue)) + geom_point() +
labs(title="Mean Log Store Item Price Change VS Walmart Weekly Revenue", x="Mean Log Store Item Price Change", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ggplot(walmart.sale, aes(x=week_id, y=weekly_revenue,color=store_id)) + geom_point() +
labs(title="Walmart Weekly Revenue 2011-2016", x="Week 1 - Week 278", y="Walmart Weekly Revenue")+
scale_colour_hue(l=30) +
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
str(walmart.sale)
model.1 <- lm(weekly_revenue ~ store_id_CA_1+store_id_CA_2+store_id_CA_3+store_id_CA_4+store_id_TX_1+store_id_TX_2+store_id_TX_3+store_id_WI_1+store_id_WI_2+store_id_WI_3+Cultural+Sporting+National+Religious+log_pct_change+amzn_price+gas_price,data=walmart.sale)
plot(model.1)
cook_distance <-cooks.distance(model.1)
which(cook_distance >1)
library(car)
library(car)
cor_walmart <- cor(walmart.sale[,c(9:10,24,25)])
View(cor_walmart)
head(t(walmart.sales[,c(9:10,24,25)]))
head(t(walmart.sale[,c(9:10,24,25)]))
head(walmart.sale)
head(t(walmart.sale))
head(walmart.sale)
prcomp(walmart.sale[,c(9:10,24,25)], scale = TRUE)
pca <- prcomp(t(walmart.sale[,c(9:10,24,25)]),scale=TRUE)
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100,1)
table <- data.frame(pca=pca$x,pca_per=pca.var.per)
barplot(pca.var.per,main="Screen Plot",xlab="Principle Component",ylab="Percent Variation")
View(table)
pca <- prcomp(walmart.sale[,c(9:10,24,25)], scale = TRUE)
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100,1)
table <- data.frame(pca=pca$x,pca_per=pca.var.per)
barplot(pca.var.per,main="Screen Plot",xlab="Principle Component",ylab="Percent Variation")
View(table)
pca <- prcomp(t(walmart.sale[,c(9:10,24,25)]),scale=TRUE)
summary(pca)
pca <- prcomp(t(walmart.sale[,c(9:10,24,25)]),scale=TRUE)
summary(pca)
pca.var <- pca$sdev^2
pca.var
pca.var.per <- round(pca.var/sum(pca.var)*100,1)
pca.var.per
table <- data.frame(pca=pca$x,pca_per=pca.var.per)
table
pca.var.per
summary(pca)
barplot(pca.var.per,main="Screen Plot",xlab="Principle Component",ylab="Percent Variation")
View(table)
#get top features that contribute to PC1
pca$rotation[,1]
head(pca$rotation)
#getting the magnitudes of loading scores
featureScores <- abs(loadingScores)
#get top features that contribute to PC1
loadingScores <- pca$rotation[,1]
#getting the magnitudes of loading scores
featureScores <- abs(loadingScores)
featureScores
geneScoreRanked <- sort(featureScores, decreasing=TRUE)
ScoreRanked <- sort(featureScores, decreasing=TRUE)
ScoreRanked
top5 <- names(ScoreRanked[1:5])
top5
table <- data.frame(pca=pca$x,pca_per=pca.var.per)
barplot(pca.var.per,main="Screen Plot",xlab="Principle Component",ylab="Percent Variation")
View(table)
summary(pca)
View(table)
print(abs( pca.components_ ))
knitr::include_graphics("../Visualizations/ModelPlots.png")
